// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoPortal.API.Data;

#nullable disable

namespace VideoPortal.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240427135643_Initial migration for AppDbContext")]
    partial class InitialmigrationforAppDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryVideoPost", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VideoPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "VideoPostsId");

                    b.HasIndex("VideoPostsId");

                    b.ToTable("CategoryVideoPost");
                });

            modelBuilder.Entity("VideoPortal.API.Models.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("VideoPortal.API.Models.Domain.VideoPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VideoPosts");
                });

            modelBuilder.Entity("VideoPortal.API.Models.Domain.VideoPostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VideoPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VideoPostId");

                    b.ToTable("VideoPostComments");
                });

            modelBuilder.Entity("VideoPortal.API.Models.Domain.VideoPostLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VideoPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VideoPostId");

                    b.ToTable("VideoLikes");
                });

            modelBuilder.Entity("CategoryVideoPost", b =>
                {
                    b.HasOne("VideoPortal.API.Models.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoPortal.API.Models.Domain.VideoPost", null)
                        .WithMany()
                        .HasForeignKey("VideoPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VideoPortal.API.Models.Domain.VideoPostComment", b =>
                {
                    b.HasOne("VideoPortal.API.Models.Domain.VideoPost", "VideoPost")
                        .WithMany("VideoPostComments")
                        .HasForeignKey("VideoPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VideoPost");
                });

            modelBuilder.Entity("VideoPortal.API.Models.Domain.VideoPostLike", b =>
                {
                    b.HasOne("VideoPortal.API.Models.Domain.VideoPost", "VideoPost")
                        .WithMany("Likes")
                        .HasForeignKey("VideoPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VideoPost");
                });

            modelBuilder.Entity("VideoPortal.API.Models.Domain.VideoPost", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("VideoPostComments");
                });
#pragma warning restore 612, 618
        }
    }
}
